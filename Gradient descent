import numpy as np
import matplotlib.pyplot as plt

np.random.seed(0)
X = 2 * np.random.rand(100, 1)
y = 4 + 3 * X + np.random.randn(100, 1)

X_b = np.c_[np.ones((100, 1)), X]
theta = np.random.randn(2, 1)

def mse_loss(X_b, y, theta):
    m = len(y)
    predictions = X_b.dot(theta)
    mse = np.sum((predictions - y)**2) / m
    return mse

def gradient(X_b, y, theta):
    m = len(y)
    predictions = X_b.dot(theta)
    grad = 2/m * X_b.T.dot(predictions - y)
    return grad

learning_rate = 0.01
n_iterations = 1000

for iteration in range(n_iterations):
    gradients = gradient(X_b, y, theta)
    theta = theta - learning_rate * gradients

print("Model parameters after gradient descent")
print(f"theta0: {theta[0][0]}")
print(f"theta1: {theta[1][0]}")

plt.scatter(X, y)
plt.plot(X, X_b.dot(theta), color='green')
plt.xlabel('X')
plt.ylabel('y')

plt.scatter(X, y)
plt.plot(X, X_b.dot(theta), color='green')
plt.xlabel('X')
plt.ylabel('y')
